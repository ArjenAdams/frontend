{"ast":null,"code":"import{useCallback,useEffect,useState}from'react';import axios from'axios';let cache={};export const useFetch=function(url){let method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'get';let enableCache=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let cacheTime=arguments.length>3&&arguments[3]!==undefined?arguments[3]:5;let postData=arguments.length>4?arguments[4]:undefined;const[data,setData]=useState(null);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const[reload,setReload]=useState(false);const fetchData=useCallback(async()=>{setIsLoading(true);try{if(cache[url]&&!reload&&enableCache){const now=Date.now();const timeElapsed=(now-cache[url].timestamp)/(1000*60);// in minutes\nif(timeElapsed<cacheTime){console.log('Using cache for url:',url);// Add this line to check if cached data is being used\nsetData(cache[url].data);setIsLoading(false);return;}}let response;if(method==='get'){response=await axios.get(url);setData(response.data);}else if(method==='post'){response=await axios.post(url,postData);setData(response.data);}if(enableCache){console.log('Saving to cache for url:',url);// Add this line to check if data is being saved to cache\ncache[url]={data:response.data,timestamp:Date.now()};}setReload(false);// reset the reload state after fetching\n}catch(error){setError(error);}finally{setIsLoading(false);}},[url,reload,enableCache,cacheTime]);useEffect(()=>{fetchData();},[fetchData]);return{data,isLoading,error,refetch:()=>setReload(true)};};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}