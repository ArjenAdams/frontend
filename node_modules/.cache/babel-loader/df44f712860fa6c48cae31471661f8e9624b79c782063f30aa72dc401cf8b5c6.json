{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nlet cache = {};\nexport const useFetch = function (url) {\n  _s();\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'get';\n  let enableCache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let cacheTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;\n  let postData = arguments.length > 4 ? arguments[4] : undefined;\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [reload, setReload] = useState(false);\n  const fetchData = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      if (cache[url] && !reload && enableCache) {\n        const now = Date.now();\n        const timeElapsed = (now - cache[url].timestamp) / (1000 * 60); // in minutes\n\n        if (timeElapsed < cacheTime) {\n          console.log('Using cache for url:', url); // Add this line to check if cached data is being used\n          setData(cache[url].data);\n          setIsLoading(false);\n          return;\n        }\n      }\n      let response;\n      if (method === 'get') {\n        response = await axios.get(url);\n        setData(response.data);\n      } else if (method === 'post') {\n        response = await axios.post(url, postData);\n        setData(response.data);\n      }\n      if (enableCache) {\n        console.log('Saving to cache for url:', url); // Add this line to check if data is being saved to cache\n        cache[url] = {\n          data: response.data,\n          timestamp: Date.now()\n        };\n      }\n      setReload(false); // reset the reload state after fetching\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [url, reload, enableCache, cacheTime]);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  return {\n    data,\n    isLoading,\n    error,\n    refetch: () => setReload(true)\n  };\n};\n_s(useFetch, \"VZi5Tm7QbDli+Lf3OoaycvpvOac=\");","map":{"version":3,"names":["useCallback","useEffect","useState","axios","cache","useFetch","url","_s","method","arguments","length","undefined","enableCache","cacheTime","postData","data","setData","isLoading","setIsLoading","error","setError","reload","setReload","fetchData","now","Date","timeElapsed","timestamp","console","log","response","get","post","refetch"],"sources":["C:/Users/arjen/Downloads/testazure/frontend/src/handler/useFetch.js"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nlet cache = {};\r\n\r\nexport const useFetch = (url, method = 'get', enableCache = false, cacheTime = 5, postData) => {\r\n    const [data, setData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [reload, setReload] = useState(false);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            if (cache[url] && !reload && enableCache) {\r\n                const now = Date.now();\r\n                const timeElapsed = (now - cache[url].timestamp) / (1000 * 60); // in minutes\r\n\r\n                if (timeElapsed < cacheTime) {\r\n                    console.log('Using cache for url:', url); // Add this line to check if cached data is being used\r\n                    setData(cache[url].data);\r\n                    setIsLoading(false);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let response;\r\n            if (method === 'get') {\r\n                response = await axios.get(url);\r\n                setData(response.data);\r\n            } else if (method === 'post') {\r\n                response = await axios.post(url, postData);\r\n                setData(response.data);\r\n            }\r\n            if (enableCache) {\r\n                console.log('Saving to cache for url:', url); // Add this line to check if data is being saved to cache\r\n                cache[url] = {data: response.data, timestamp: Date.now()};\r\n            }\r\n\r\n            setReload(false); // reset the reload state after fetching\r\n\r\n        } catch (error) {\r\n            setError(error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [url, reload, enableCache, cacheTime]);\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [fetchData]);\r\n\r\n    return {data, isLoading, error, refetch: () => setReload(true)};\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}