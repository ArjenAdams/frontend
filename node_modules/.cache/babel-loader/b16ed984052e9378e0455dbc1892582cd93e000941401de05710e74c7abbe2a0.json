{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arjen\\\\Downloads\\\\testazure\\\\frontend\\\\src\\\\components\\\\Counterfactual\\\\CounterfactualValues.js\";\nimport { Card, CardBody, CardHeader, CardSubtitle, CardTitle, Col, Row, Table } from \"reactstrap\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction convertToBoolean(boolean) {\n  return boolean === 1;\n}\nfunction CounterfactualValues(data) {\n  if (data === null || data === undefined) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardHeader, {\n          children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"text-dark text-2rem\",\n            children: \"Veranderingen voor andere voorspelling\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CardSubtitle, {\n            className: \"text-muted text-1rem\",\n            children: \"De minimale veranderingen in de pati\\xEBntkenmerken die leiden tot een andere voorspelling\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n  const counterfactuals = data.counterfactuals;\n  console.log(\"Counterfactuals\");\n  console.log(counterfactuals);\n  console.log(\"patient\");\n  console.log(data);\n  const prediction = data.prediction;\n  console.log(\"prediction\");\n  console.log(prediction);\n  const patient = data === null || data === void 0 ? void 0 : data.patient;\n  let gender = \"F\";\n  // Gender converten naar getallen\n  if (patient.gender === 1) {\n    gender = \"M\";\n  }\n  const predPatient = prediction.prediction;\n  let predictionPatient;\n  let certaintyPatient = prediction.confidence;\n  if (certaintyPatient === null || certaintyPatient === undefined) {\n    console.log(\"Certainty Patient is null or undefined!\");\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"text-dark text-2rem\",\n            children: \"Veranderingen voor andere voorspelling\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CardSubtitle, {\n            className: \"text-muted text-1rem\",\n            children: \"De minimale veranderingen in de pati\\xEBntkenmerken die leiden tot een andere voorspelling\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: \"Loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n  if (Number(predPatient) >= 0.5) {\n    predictionPatient = \"Ja\";\n  } else {\n    predictionPatient = \"Nee\";\n  }\n  const ownPatient = {\n    \"Heeft SAD?\": {\n      \"value\": predictionPatient,\n      \"type\": \"text\"\n    },\n    \"Zekerheidsscore\": {\n      \"value\": certaintyPatient.toFixed(2),\n      \"type\": \"number\"\n    },\n    \"Gender\": {\n      \"value\": gender,\n      \"type\": \"text\"\n    },\n    \"Age\": {\n      \"value\": patient.age,\n      \"type\": \"number\"\n    },\n    \"Weight\": {\n      \"value\": patient.weight,\n      \"type\": \"number\"\n    },\n    \"Temperature\": {\n      \"value\": patient.temperature,\n      \"type\": \"number\"\n    },\n    \"Heart Rate\": {\n      \"value\": patient.heart_rate,\n      \"type\": \"number\"\n    },\n    \"Respiration Rate\": {\n      \"value\": patient.resp_rate,\n      \"type\": \"number\"\n    },\n    \"Oxygen Saturation\": {\n      \"value\": patient.spo2,\n      \"type\": \"number\"\n    },\n    \"Systolic Blood Pressure\": {\n      \"value\": patient.sbp,\n      \"type\": \"number\"\n    },\n    \"Diastolic Blood Pressure\": {\n      \"value\": patient.dbp,\n      \"type\": \"number\"\n    },\n    \"Mean Blood Pressure\": {\n      \"value\": patient.mbp,\n      \"type\": \"number\"\n    },\n    \"White Blood Cell Count\": {\n      \"value\": patient.wbc,\n      \"type\": \"number\"\n    },\n    \"Hemoglobin\": {\n      \"value\": patient.hemoglobin,\n      \"type\": \"number\"\n    },\n    \"Platelet Count\": {\n      \"value\": patient.platelet,\n      \"type\": \"number\"\n    },\n    \"Blood Urea Nitrogen\": {\n      \"value\": patient.bun,\n      \"type\": \"number\"\n    },\n    \"Creatinine\": {\n      \"value\": patient.cr,\n      \"type\": \"number\"\n    },\n    \"Glucose\": {\n      \"value\": patient.glu,\n      \"type\": \"number\"\n    },\n    \"Sodium\": {\n      \"value\": patient.Na,\n      \"type\": \"number\"\n    },\n    \"Chloride\": {\n      \"value\": patient.Cl,\n      \"type\": \"number\"\n    },\n    \"Potassium\": {\n      \"value\": patient.K,\n      \"type\": \"number\"\n    },\n    \"Magnesium\": {\n      \"value\": patient.Mg,\n      \"type\": \"number\"\n    },\n    \"Calcium\": {\n      \"value\": patient.Ca,\n      \"type\": \"number\"\n    },\n    \"Phosphorus\": {\n      \"value\": patient.P,\n      \"type\": \"number\"\n    },\n    \"International Normalized Ratio\": {\n      \"value\": patient.inr,\n      \"type\": \"number\"\n    },\n    \"Prothrombin Time\": {\n      \"value\": patient.pt,\n      \"type\": \"number\"\n    },\n    \"Partial Thromboplastin Time\": {\n      \"value\": patient.ptt,\n      \"type\": \"number\"\n    },\n    \"Bicarbonate\": {\n      \"value\": patient.bicarbonate,\n      \"type\": \"number\"\n    },\n    \"Anion Gap\": {\n      \"value\": patient.aniongap,\n      \"type\": \"number\"\n    },\n    \"Glasgow Coma Scale\": {\n      \"value\": patient.gcs,\n      \"type\": \"number\"\n    },\n    \"Ventilation\": {\n      \"value\": patient.vent,\n      \"type\": \"number\"\n    },\n    \"Continuous Renal Replacement Therapy\": {\n      \"value\": patient.crrt,\n      \"type\": \"number\"\n    },\n    \"Vasoconstrictors\": {\n      \"value\": patient === null || patient === void 0 ? void 0 : patient.vaso,\n      \"type\": \"number\"\n    },\n    \"Sedatives\": {\n      \"value\": patient === null || patient === void 0 ? void 0 : patient.seda,\n      \"type\": \"number\"\n    },\n    \"Sequential Organ Failure Assessment Score\": {\n      \"value\": patient === null || patient === void 0 ? void 0 : patient.sofa_score,\n      \"type\": \"number\"\n    },\n    \"Acute Myocardial Infarction\": {\n      \"value\": patient === null || patient === void 0 ? void 0 : patient.ami,\n      \"type\": \"number\"\n    },\n    \"Chronic Kidney Disease\": {\n      \"value\": patient === null || patient === void 0 ? void 0 : patient.ckd,\n      \"type\": \"number\"\n    },\n    \"Chronic Obstructive Pulmonary Disease\": {\n      \"value\": patient === null || patient === void 0 ? void 0 : patient.copd,\n      \"type\": \"number\"\n    },\n    \"Hypertension\": {\n      \"value\": patient === null || patient === void 0 ? void 0 : patient.hyperte,\n      \"type\": \"number\"\n    },\n    \"Diabetes Mellitus\": {\n      \"value\": patient === null || patient === void 0 ? void 0 : patient.dm,\n      \"type\": \"number\"\n    },\n    \"Acute Kidney Injury\": {\n      \"value\": patient === null || patient === void 0 ? void 0 : patient.aki,\n      \"type\": \"number\"\n    },\n    \"Stroke\": {\n      \"value\": patient === null || patient === void 0 ? void 0 : patient.stroke,\n      \"type\": \"number\"\n    },\n    \"Aisan\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.AISAN),\n      \"type\": \"boolean\"\n    },\n    \"Black\": {\n      \"value\": convertToBoolean(patient.BLACK),\n      \"type\": \"boolean\"\n    },\n    \"Hispanic\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.HISPANIC),\n      \"type\": \"boolean\"\n    },\n    \"Other\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.OTHER),\n      \"type\": \"boolean\"\n    },\n    \"White\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.WHITE),\n      \"type\": \"boolean\"\n    },\n    \"Unknown\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.unknown),\n      \"type\": \"boolean\"\n    },\n    \"Coronary Care Unit\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.CCU),\n      \"type\": \"boolean\"\n    },\n    \"Cardiovascular Intensive Care Unit\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.CVICU),\n      \"type\": \"boolean\"\n    },\n    \"Mobile Intensive Care Unit\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.MICU),\n      \"type\": \"boolean\"\n    },\n    \"Mobile/Surgical Intensive Care Unit\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.MICU_SICU),\n      \"type\": \"boolean\"\n    },\n    \"Neonatal Intensive Care Unit\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.NICU),\n      \"type\": \"boolean\"\n    },\n    \"Surgical Intensive Care Unit\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.SICU),\n      \"type\": \"boolean\"\n    },\n    \"Trauma Intensive Care Unit\": {\n      \"value\": convertToBoolean(patient === null || patient === void 0 ? void 0 : patient.TSICU),\n      \"type\": \"boolean\"\n    }\n  };\n  let counterfactuals_list = [];\n  const titles = Object.keys(ownPatient);\n  let origineleWaarden = [];\n  for (const title in ownPatient) {\n    const value = ownPatient[title].value;\n    const type = ownPatient[title].type;\n    origineleWaarden.push([value, type]);\n  }\n  let size = counterfactuals.length - 1;\n  let counter = [];\n  while (size >= 0) {\n    let counterfactual = counterfactuals[size];\n    let gender = \"F\";\n    // Gender converten naar getallen\n    if (counterfactual.gender === 1) {\n      gender = \"M\";\n    }\n    const pred = counterfactual.pred;\n    let prediction;\n    let certainty = counterfactual.reg;\n    if (Number(pred) >= 0.5) {\n      prediction = \"Ja\";\n      certainty = certainty * 100;\n    } else {\n      prediction = \"Nee\";\n      certainty = 100 - certainty * 100;\n    }\n    let counterfactualPatient = {\n      \"Heeft SAD?\": {\n        \"value\": prediction,\n        \"type\": \"text\"\n      },\n      \"Zekerheidsscore\": {\n        \"value\": certainty.toFixed(2),\n        \"type\": \"number\"\n      },\n      \"Gender\": {\n        \"value\": gender,\n        \"type\": \"text\"\n      },\n      \"Age\": {\n        \"value\": counterfactual.age,\n        \"type\": \"number\"\n      },\n      \"Weight\": {\n        \"value\": counterfactual.weight,\n        \"type\": \"number\"\n      },\n      \"Temperature\": {\n        \"value\": counterfactual.temperature,\n        \"type\": \"number\"\n      },\n      \"Heart Rate\": {\n        \"value\": counterfactual.heart_rate,\n        \"type\": \"number\"\n      },\n      \"Respiration Rate\": {\n        \"value\": counterfactual.resp_rate,\n        \"type\": \"number\"\n      },\n      \"Oxygen Saturation\": {\n        \"value\": counterfactual.spo2,\n        \"type\": \"number\"\n      },\n      \"Systolic Blood Pressure\": {\n        \"value\": counterfactual.sbp,\n        \"type\": \"number\"\n      },\n      \"Diastolic Blood Pressure\": {\n        \"value\": counterfactual.dbp,\n        \"type\": \"number\"\n      },\n      \"Mean Blood Pressure\": {\n        \"value\": counterfactual.mbp,\n        \"type\": \"number\"\n      },\n      \"White Blood Cell Count\": {\n        \"value\": counterfactual.wbc,\n        \"type\": \"number\"\n      },\n      \"Hemoglobin\": {\n        \"value\": counterfactual.hemoglobin,\n        \"type\": \"number\"\n      },\n      \"Platelet Count\": {\n        \"value\": counterfactual.platelet,\n        \"type\": \"number\"\n      },\n      \"Blood Urea Nitrogen\": {\n        \"value\": counterfactual.bun,\n        \"type\": \"number\"\n      },\n      \"Creatinine\": {\n        \"value\": counterfactual.cr,\n        \"type\": \"number\"\n      },\n      \"Glucose\": {\n        \"value\": counterfactual.glu,\n        \"type\": \"number\"\n      },\n      \"Sodium\": {\n        \"value\": counterfactual.Na,\n        \"type\": \"number\"\n      },\n      \"Chloride\": {\n        \"value\": counterfactual.Cl,\n        \"type\": \"number\"\n      },\n      \"Potassium\": {\n        \"value\": counterfactual.K,\n        \"type\": \"number\"\n      },\n      \"Magnesium\": {\n        \"value\": counterfactual.Mg,\n        \"type\": \"number\"\n      },\n      \"Calcium\": {\n        \"value\": counterfactual.Ca,\n        \"type\": \"number\"\n      },\n      \"Phosphorus\": {\n        \"value\": counterfactual.P,\n        \"type\": \"number\"\n      },\n      \"International Normalized Ratio\": {\n        \"value\": counterfactual.inr,\n        \"type\": \"number\"\n      },\n      \"Prothrombin Time\": {\n        \"value\": counterfactual.pt,\n        \"type\": \"number\"\n      },\n      \"Partial Thromboplastin Time\": {\n        \"value\": counterfactual.ptt,\n        \"type\": \"number\"\n      },\n      \"Bicarbonate\": {\n        \"value\": counterfactual.bicarbonate,\n        \"type\": \"number\"\n      },\n      \"Anion Gap\": {\n        \"value\": counterfactual.aniongap,\n        \"type\": \"number\"\n      },\n      \"Glasgow Coma Scale\": {\n        \"value\": counterfactual.gcs,\n        \"type\": \"number\"\n      },\n      \"Ventilation\": {\n        \"value\": counterfactual.vent,\n        \"type\": \"number\"\n      },\n      \"Continuous Renal Replacement Therapy\": {\n        \"value\": counterfactual.crrt,\n        \"type\": \"number\"\n      },\n      \"Vasoconstrictors\": {\n        \"value\": counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.vaso,\n        \"type\": \"number\"\n      },\n      \"Sedatives\": {\n        \"value\": counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.seda,\n        \"type\": \"number\"\n      },\n      \"Sequential Organ Failure Assessment Score\": {\n        \"value\": counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.sofa_score,\n        \"type\": \"number\"\n      },\n      \"Acute Myocardial Infarction\": {\n        \"value\": counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.ami,\n        \"type\": \"number\"\n      },\n      \"Chronic Kidney Disease\": {\n        \"value\": counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.ckd,\n        \"type\": \"number\"\n      },\n      \"Chronic Obstructive Pulmonary Disease\": {\n        \"value\": counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.copd,\n        \"type\": \"number\"\n      },\n      \"Hypertension\": {\n        \"value\": counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.hyperte,\n        \"type\": \"number\"\n      },\n      \"Diabetes Mellitus\": {\n        \"value\": counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.dm,\n        \"type\": \"number\"\n      },\n      \"Acute Kidney Injury\": {\n        \"value\": counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.aki,\n        \"type\": \"number\"\n      },\n      \"Stroke\": {\n        \"value\": counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.stroke,\n        \"type\": \"number\"\n      },\n      \"Aisan\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.AISAN),\n        \"type\": \"boolean\"\n      },\n      \"Black\": {\n        \"value\": convertToBoolean(counterfactual.BLACK),\n        \"type\": \"boolean\"\n      },\n      \"Hispanic\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.HISPANIC),\n        \"type\": \"boolean\"\n      },\n      \"Other\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.OTHER),\n        \"type\": \"boolean\"\n      },\n      \"White\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.WHITE),\n        \"type\": \"boolean\"\n      },\n      \"Unknown\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.unknown),\n        \"type\": \"boolean\"\n      },\n      \"Coronary Care Unit\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.CCU),\n        \"type\": \"boolean\"\n      },\n      \"Cardiovascular Intensive Care Unit\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.CVICU),\n        \"type\": \"boolean\"\n      },\n      \"Mobile Intensive Care Unit\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.MICU),\n        \"type\": \"boolean\"\n      },\n      \"Mobile/Surgical Intensive Care Unit\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.MICU_SICU),\n        \"type\": \"boolean\"\n      },\n      \"Neonatal Intensive Care Unit\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.NICU),\n        \"type\": \"boolean\"\n      },\n      \"Surgical Intensive Care Unit\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.SICU),\n        \"type\": \"boolean\"\n      },\n      \"Trauma Intensive Care Unit\": {\n        \"value\": convertToBoolean(counterfactual === null || counterfactual === void 0 ? void 0 : counterfactual.TSICU),\n        \"type\": \"boolean\"\n      }\n    };\n    counterfactuals_list.push(counterfactualPatient);\n    let counterfactualWaarden = [];\n    for (const title in counterfactualPatient) {\n      const value = counterfactualPatient[title].value;\n      const type = counterfactualPatient[title].type;\n      counterfactualWaarden.push([value, type]);\n    }\n    counter.push(counterfactualWaarden);\n    counterfactualWaarden = [];\n    size--;\n  }\n  let predictionResult;\n  let certaintyScore;\n  if (counterfactuals.length > 0) {\n    const pred = counterfactuals[0][\"pred\"];\n    certaintyScore = counterfactuals[0][\"reg\"];\n    if (Number(pred) >= 0.5) {\n      predictionResult = \"Ja\";\n      certaintyScore = certaintyScore * 100;\n    } else {\n      predictionResult = \"Nee\";\n      certaintyScore = 100 - certaintyScore * 100;\n    }\n  }\n  const dummyData = titles.map((title, index) => ({\n    id: index + 1,\n    gegevens: title,\n    origineleWaarde: origineleWaarden[index][0],\n    typeInput: origineleWaarden[index][1],\n    counterfactuals: counter ? counter.map(cf => cf[index][0]) : []\n  }));\n  function colorRow(row) {\n    if (row.counterfactuals === row.origineleWaarde) {\n      return \"td-values\";\n    } else {\n      return \"row-color\";\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          className: \"text-dark text-2rem\",\n          children: \"Veranderingen voor andere voorspelling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardSubtitle, {\n          className: \"text-muted text-1rem\",\n          children: \"De minimale veranderingen in de pati\\xEBntkenmerken die leiden tot een andere voorspelling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: 8,\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Gegevens\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 612,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"th-align-middle\",\n                    children: \"Originele waarde\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 613,\n                    columnNumber: 37\n                  }, this), counter && counter.map((_, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"th-align-middle\",\n                    children: [\"Counterfactual \", index + 1]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 617,\n                    columnNumber: 41\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 611,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: dummyData.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    className: `${colorRow(row)} td-left-align`,\n                    children: row.gegevens\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 627,\n                    columnNumber: 41\n                  }, this), typeof row.origineleWaarde === \"number\" && row.origineleWaarde.toString().includes(\".\") ? /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: `${colorRow(row)} td-values`,\n                    children: Number.parseFloat(row.origineleWaarde).toFixed(2)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 629,\n                    columnNumber: 45\n                  }, this) : /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: `${colorRow(row)} td-values`,\n                    children: row.origineleWaarde.toString()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 631,\n                    columnNumber: 45\n                  }, this), row.counterfactuals && row.counterfactuals.length > 0 ? row.counterfactuals.map((value, index) => typeof value === \"number\" && value.toString().includes(\".\") ? /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: `${colorRow(row)} td-values`,\n                    children: Number.parseFloat(value).toFixed(2)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 636,\n                    columnNumber: 53\n                  }, this) : /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: `${colorRow(row)} td-values`,\n                    children: value.toString()\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 638,\n                    columnNumber: 53\n                  }, this)) : /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: `${colorRow(row)} td-values`,\n                    colSpan: counter.length,\n                    children: \"No Data\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 642,\n                    columnNumber: 45\n                  }, this)]\n                }, row.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 626,\n                  columnNumber: 37\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = CounterfactualValues;\nexport default CounterfactualValues;\nvar _c;\n$RefreshReg$(_c, \"CounterfactualValues\");","map":{"version":3,"names":["Card","CardBody","CardHeader","CardSubtitle","CardTitle","Col","Row","Table","React","jsxDEV","_jsxDEV","Fragment","_Fragment","convertToBoolean","boolean","CounterfactualValues","data","undefined","children","className","fileName","_jsxFileName","lineNumber","columnNumber","counterfactuals","console","log","prediction","patient","gender","predPatient","predictionPatient","certaintyPatient","confidence","Number","ownPatient","toFixed","age","weight","temperature","heart_rate","resp_rate","spo2","sbp","dbp","mbp","wbc","hemoglobin","platelet","bun","cr","glu","Na","Cl","K","Mg","Ca","P","inr","pt","ptt","bicarbonate","aniongap","gcs","vent","crrt","vaso","seda","sofa_score","ami","ckd","copd","hyperte","dm","aki","stroke","AISAN","BLACK","HISPANIC","OTHER","WHITE","unknown","CCU","CVICU","MICU","MICU_SICU","NICU","SICU","TSICU","counterfactuals_list","titles","Object","keys","origineleWaarden","title","value","type","push","size","length","counter","counterfactual","pred","certainty","reg","counterfactualPatient","counterfactualWaarden","predictionResult","certaintyScore","dummyData","map","index","id","gegevens","origineleWaarde","typeInput","cf","colorRow","row","md","_","toString","includes","parseFloat","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/arjen/Downloads/testazure/frontend/src/components/Counterfactual/CounterfactualValues.js"],"sourcesContent":["import {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    CardSubtitle,\r\n    CardTitle,\r\n    Col,\r\n    Row,\r\n    Table\r\n} from \"reactstrap\";\r\nimport React from \"react\";\r\n\r\nfunction convertToBoolean(boolean) {\r\n    return boolean === 1;\r\n}\r\n\r\nfunction CounterfactualValues(data) {\r\n    if (data === null || data === undefined) {\r\n        return (\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <CardTitle className=\"text-dark text-2rem\">Veranderingen\r\n                            voor andere voorspelling</CardTitle>\r\n                        <CardSubtitle className=\"text-muted text-1rem\">\r\n                            De minimale veranderingen in de patiëntkenmerken\r\n                            die leiden tot een andere voorspelling\r\n                        </CardSubtitle>\r\n                    </CardHeader>\r\n                </Card>\r\n            </>)\r\n    }\r\n    const counterfactuals = data.counterfactuals\r\n    console.log(\"Counterfactuals\")\r\n    console.log(counterfactuals)\r\n    console.log(\"patient\")\r\n    console.log(data)\r\n    const prediction = data.prediction\r\n    console.log(\"prediction\")\r\n    console.log(prediction)\r\n    const patient = data?.patient;\r\n    let gender = \"F\"\r\n    // Gender converten naar getallen\r\n    if (patient.gender === 1) {\r\n        gender = \"M\"\r\n    }\r\n    const predPatient = prediction.prediction\r\n    let predictionPatient;\r\n    let certaintyPatient = prediction.confidence;\r\n    if (certaintyPatient === null || certaintyPatient === undefined) {\r\n        console.log(\"Certainty Patient is null or undefined!\")\r\n        return (\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <CardTitle className=\"text-dark text-2rem\">Veranderingen\r\n                            voor andere voorspelling</CardTitle>\r\n                        <CardSubtitle className=\"text-muted text-1rem\">\r\n                            De minimale veranderingen in de patiëntkenmerken\r\n                            die leiden tot een andere voorspelling\r\n                        </CardSubtitle>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        Loading\r\n                    </CardBody>\r\n                </Card>\r\n            </>)\r\n    }\r\n    if (Number(predPatient) >= 0.5) {\r\n        predictionPatient = \"Ja\"\r\n    } else {\r\n        predictionPatient = \"Nee\"\r\n    }\r\n\r\n    const ownPatient = {\r\n        \"Heeft SAD?\": {\r\n            \"value\": predictionPatient,\r\n            \"type\": \"text\"\r\n        },\r\n        \"Zekerheidsscore\": {\r\n            \"value\": certaintyPatient.toFixed(2),\r\n            \"type\": \"number\"\r\n        },\r\n        \"Gender\": {\r\n            \"value\": gender,\r\n            \"type\": \"text\"\r\n        },\r\n        \"Age\": {\r\n            \"value\": patient.age,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Weight\": {\r\n            \"value\": patient.weight,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Temperature\": {\r\n            \"value\": patient.temperature,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Heart Rate\": {\r\n            \"value\": patient.heart_rate,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Respiration Rate\": {\r\n            \"value\": patient.resp_rate,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Oxygen Saturation\": {\r\n            \"value\": patient.spo2,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Systolic Blood Pressure\": {\r\n            \"value\": patient.sbp,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Diastolic Blood Pressure\": {\r\n            \"value\": patient.dbp,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Mean Blood Pressure\": {\r\n            \"value\": patient.mbp,\r\n            \"type\": \"number\"\r\n        },\r\n        \"White Blood Cell Count\": {\r\n            \"value\": patient.wbc,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Hemoglobin\": {\r\n            \"value\": patient.hemoglobin,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Platelet Count\": {\r\n            \"value\": patient.platelet,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Blood Urea Nitrogen\": {\r\n            \"value\": patient.bun,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Creatinine\": {\r\n            \"value\": patient.cr,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Glucose\": {\r\n            \"value\": patient.glu,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Sodium\": {\r\n            \"value\": patient.Na,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Chloride\": {\r\n            \"value\": patient.Cl,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Potassium\": {\r\n            \"value\": patient.K,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Magnesium\": {\r\n            \"value\": patient.Mg,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Calcium\": {\r\n            \"value\": patient.Ca,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Phosphorus\": {\r\n            \"value\": patient.P,\r\n            \"type\": \"number\"\r\n        },\r\n        \"International Normalized Ratio\": {\r\n            \"value\": patient.inr,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Prothrombin Time\": {\r\n            \"value\": patient.pt,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Partial Thromboplastin Time\": {\r\n            \"value\": patient.ptt,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Bicarbonate\": {\r\n            \"value\": patient.bicarbonate,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Anion Gap\": {\r\n            \"value\": patient.aniongap,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Glasgow Coma Scale\": {\r\n            \"value\": patient.gcs,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Ventilation\": {\r\n            \"value\": patient.vent,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Continuous Renal Replacement Therapy\": {\r\n            \"value\": patient.crrt,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Vasoconstrictors\": {\r\n            \"value\": patient?.vaso,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Sedatives\": {\r\n            \"value\": patient?.seda,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Sequential Organ Failure Assessment Score\": {\r\n            \"value\": patient?.sofa_score,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Acute Myocardial Infarction\": {\r\n            \"value\": patient?.ami,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Chronic Kidney Disease\": {\r\n            \"value\": patient?.ckd,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Chronic Obstructive Pulmonary Disease\": {\r\n            \"value\": patient?.copd,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Hypertension\": {\r\n            \"value\": patient?.hyperte,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Diabetes Mellitus\": {\r\n            \"value\": patient?.dm,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Acute Kidney Injury\": {\r\n            \"value\": patient?.aki,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Stroke\": {\r\n            \"value\": patient?.stroke,\r\n            \"type\": \"number\"\r\n        },\r\n        \"Aisan\": {\r\n            \"value\": convertToBoolean(patient?.AISAN),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"Black\": {\r\n            \"value\": convertToBoolean(patient.BLACK),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"Hispanic\": {\r\n            \"value\": convertToBoolean(patient?.HISPANIC),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"Other\": {\r\n            \"value\": convertToBoolean(patient?.OTHER),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"White\": {\r\n            \"value\": convertToBoolean(patient?.WHITE),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"Unknown\": {\r\n            \"value\": convertToBoolean(patient?.unknown),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"Coronary Care Unit\": {\r\n            \"value\": convertToBoolean(patient?.CCU),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"Cardiovascular Intensive Care Unit\": {\r\n            \"value\": convertToBoolean(patient?.CVICU),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"Mobile Intensive Care Unit\": {\r\n            \"value\": convertToBoolean(patient?.MICU),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"Mobile/Surgical Intensive Care Unit\": {\r\n            \"value\": convertToBoolean(patient?.MICU_SICU),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"Neonatal Intensive Care Unit\": {\r\n            \"value\": convertToBoolean(patient?.NICU),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"Surgical Intensive Care Unit\": {\r\n            \"value\": convertToBoolean(patient?.SICU),\r\n            \"type\": \"boolean\"\r\n        },\r\n        \"Trauma Intensive Care Unit\": {\r\n            \"value\": convertToBoolean(patient?.TSICU),\r\n            \"type\": \"boolean\"\r\n        }\r\n    }\r\n    let counterfactuals_list = []\r\n    const titles = Object.keys(ownPatient)\r\n    let origineleWaarden = [];\r\n\r\n    for (const title in ownPatient) {\r\n        const value = ownPatient[title].value;\r\n        const type = ownPatient[title].type;\r\n        origineleWaarden.push([value, type])\r\n    }\r\n    let size = counterfactuals.length - 1\r\n    let counter = []\r\n\r\n    while (size >= 0) {\r\n        let counterfactual = counterfactuals[size]\r\n\r\n        let gender = \"F\"\r\n        // Gender converten naar getallen\r\n        if (counterfactual.gender === 1) {\r\n            gender = \"M\"\r\n        }\r\n\r\n        const pred = counterfactual.pred\r\n        let prediction;\r\n        let certainty = counterfactual.reg;\r\n        if (Number(pred) >= 0.5) {\r\n            prediction = \"Ja\"\r\n            certainty = certainty * 100\r\n        } else {\r\n            prediction = \"Nee\"\r\n            certainty = 100 - certainty * 100\r\n        }\r\n        let counterfactualPatient = {\r\n            \"Heeft SAD?\": {\r\n                \"value\": prediction,\r\n                \"type\": \"text\"\r\n            },\r\n            \"Zekerheidsscore\": {\r\n                \"value\": certainty.toFixed(2),\r\n                \"type\": \"number\"\r\n            },\r\n            \"Gender\": {\r\n                \"value\": gender,\r\n                \"type\": \"text\"\r\n            },\r\n            \"Age\": {\r\n                \"value\": counterfactual.age,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Weight\": {\r\n                \"value\": counterfactual.weight,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Temperature\": {\r\n                \"value\": counterfactual.temperature,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Heart Rate\": {\r\n                \"value\": counterfactual.heart_rate,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Respiration Rate\": {\r\n                \"value\": counterfactual.resp_rate,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Oxygen Saturation\": {\r\n                \"value\": counterfactual.spo2,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Systolic Blood Pressure\": {\r\n                \"value\": counterfactual.sbp,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Diastolic Blood Pressure\": {\r\n                \"value\": counterfactual.dbp,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Mean Blood Pressure\": {\r\n                \"value\": counterfactual.mbp,\r\n                \"type\": \"number\"\r\n            },\r\n            \"White Blood Cell Count\": {\r\n                \"value\": counterfactual.wbc,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Hemoglobin\": {\r\n                \"value\": counterfactual.hemoglobin,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Platelet Count\": {\r\n                \"value\": counterfactual.platelet,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Blood Urea Nitrogen\": {\r\n                \"value\": counterfactual.bun,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Creatinine\": {\r\n                \"value\": counterfactual.cr,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Glucose\": {\r\n                \"value\": counterfactual.glu,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Sodium\": {\r\n                \"value\": counterfactual.Na,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Chloride\": {\r\n                \"value\": counterfactual.Cl,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Potassium\": {\r\n                \"value\": counterfactual.K,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Magnesium\": {\r\n                \"value\": counterfactual.Mg,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Calcium\": {\r\n                \"value\": counterfactual.Ca,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Phosphorus\": {\r\n                \"value\": counterfactual.P,\r\n                \"type\": \"number\"\r\n            },\r\n            \"International Normalized Ratio\": {\r\n                \"value\": counterfactual.inr,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Prothrombin Time\": {\r\n                \"value\": counterfactual.pt,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Partial Thromboplastin Time\": {\r\n                \"value\": counterfactual.ptt,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Bicarbonate\": {\r\n                \"value\": counterfactual.bicarbonate,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Anion Gap\": {\r\n                \"value\": counterfactual.aniongap,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Glasgow Coma Scale\": {\r\n                \"value\": counterfactual.gcs,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Ventilation\": {\r\n                \"value\": counterfactual.vent,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Continuous Renal Replacement Therapy\": {\r\n                \"value\": counterfactual.crrt,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Vasoconstrictors\": {\r\n                \"value\": counterfactual?.vaso,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Sedatives\": {\r\n                \"value\": counterfactual?.seda,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Sequential Organ Failure Assessment Score\": {\r\n                \"value\": counterfactual?.sofa_score,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Acute Myocardial Infarction\": {\r\n                \"value\": counterfactual?.ami,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Chronic Kidney Disease\": {\r\n                \"value\": counterfactual?.ckd,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Chronic Obstructive Pulmonary Disease\": {\r\n                \"value\": counterfactual?.copd,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Hypertension\": {\r\n                \"value\": counterfactual?.hyperte,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Diabetes Mellitus\": {\r\n                \"value\": counterfactual?.dm,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Acute Kidney Injury\": {\r\n                \"value\": counterfactual?.aki,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Stroke\": {\r\n                \"value\": counterfactual?.stroke,\r\n                \"type\": \"number\"\r\n            },\r\n            \"Aisan\": {\r\n                \"value\": convertToBoolean(counterfactual?.AISAN),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"Black\": {\r\n                \"value\": convertToBoolean(counterfactual.BLACK),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"Hispanic\": {\r\n                \"value\": convertToBoolean(counterfactual?.HISPANIC),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"Other\": {\r\n                \"value\": convertToBoolean(counterfactual?.OTHER),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"White\": {\r\n                \"value\": convertToBoolean(counterfactual?.WHITE),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"Unknown\": {\r\n                \"value\": convertToBoolean(counterfactual?.unknown),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"Coronary Care Unit\": {\r\n                \"value\": convertToBoolean(counterfactual?.CCU),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"Cardiovascular Intensive Care Unit\": {\r\n                \"value\": convertToBoolean(counterfactual?.CVICU),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"Mobile Intensive Care Unit\": {\r\n                \"value\": convertToBoolean(counterfactual?.MICU),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"Mobile/Surgical Intensive Care Unit\": {\r\n                \"value\": convertToBoolean(counterfactual?.MICU_SICU),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"Neonatal Intensive Care Unit\": {\r\n                \"value\": convertToBoolean(counterfactual?.NICU),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"Surgical Intensive Care Unit\": {\r\n                \"value\": convertToBoolean(counterfactual?.SICU),\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"Trauma Intensive Care Unit\": {\r\n                \"value\": convertToBoolean(counterfactual?.TSICU),\r\n                \"type\": \"boolean\"\r\n            },\r\n        }\r\n        counterfactuals_list.push(counterfactualPatient)\r\n\r\n        let counterfactualWaarden = [];\r\n        for (const title in counterfactualPatient) {\r\n            const value = counterfactualPatient[title].value;\r\n            const type = counterfactualPatient[title].type;\r\n            counterfactualWaarden.push([value, type])\r\n        }\r\n        counter.push(counterfactualWaarden)\r\n        counterfactualWaarden = []\r\n        size--\r\n    }\r\n\r\n    let predictionResult;\r\n    let certaintyScore\r\n\r\n    if (counterfactuals.length > 0) {\r\n        const pred = counterfactuals[0][\"pred\"]\r\n        certaintyScore = counterfactuals[0][\"reg\"]\r\n        if (Number(pred) >= 0.5) {\r\n            predictionResult = \"Ja\"\r\n            certaintyScore = certaintyScore * 100\r\n        } else {\r\n            predictionResult = \"Nee\"\r\n            certaintyScore = 100 - certaintyScore * 100\r\n        }\r\n    }\r\n\r\n    const dummyData = titles.map((title, index) => ({\r\n        id: index + 1,\r\n        gegevens: title,\r\n        origineleWaarde: origineleWaarden[index][0],\r\n        typeInput: origineleWaarden[index][1],\r\n        counterfactuals: counter ? counter.map(cf => cf[index][0]) : []\r\n    }));\r\n\r\n\r\n    function colorRow(row) {\r\n        if (row.counterfactuals === row.origineleWaarde) {\r\n            return \"td-values\";\r\n        } else {\r\n            return \"row-color\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <CardHeader>\r\n                    <CardTitle className=\"text-dark text-2rem\">Veranderingen\r\n                        voor andere voorspelling</CardTitle>\r\n                    <CardSubtitle className=\"text-muted text-1rem\">\r\n                        De minimale veranderingen in de patiëntkenmerken die\r\n                        leiden tot een andere voorspelling\r\n                    </CardSubtitle>\r\n                </CardHeader>\r\n                <CardBody>\r\n                    <Row>\r\n                        <Col md={8}>\r\n                            <Table>\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>Gegevens</th>\r\n                                    <th className=\"th-align-middle\">Originele\r\n                                        waarde\r\n                                    </th>\r\n                                    {counter && counter.map((_, index) => (\r\n                                        <th key={index}\r\n                                            className=\"th-align-middle\">Counterfactual {index + 1}</th>\r\n                                    ))}\r\n\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {dummyData.map((row) => (\r\n\r\n                                    <tr key={row.id}>\r\n                                        <td className={`${colorRow(row)} td-left-align`}>{row.gegevens}</td>\r\n                                        {typeof (row.origineleWaarde) === \"number\" && row.origineleWaarde.toString().includes(\".\") ? (\r\n                                            <td className={`${colorRow(row)} td-values`}>{Number.parseFloat(row.origineleWaarde).toFixed(2)}</td>\r\n                                        ) : (\r\n                                            <td className={`${colorRow(row)} td-values`}>{row.origineleWaarde.toString()}</td>\r\n                                        )}\r\n                                        {row.counterfactuals && row.counterfactuals.length > 0 ? (\r\n                                            row.counterfactuals.map((value, index) => (\r\n                                                typeof (value) === \"number\" && value.toString().includes(\".\") ? (\r\n                                                    <td key={index} className={`${colorRow(row)} td-values`}>{Number.parseFloat(value).toFixed(2)}</td>\r\n                                                ) : (\r\n                                                    <td key={index} className={`${colorRow(row)} td-values`}>{value.toString()}</td>\r\n                                                )\r\n                                            ))\r\n                                        ) : (\r\n                                            <td className={`${colorRow(row)} td-values`}\r\n                                                colSpan={counter.length}>No\r\n                                                Data</td>\r\n                                        )}\r\n                                    </tr>\r\n\r\n                                ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </CardBody>\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CounterfactualValues;"],"mappings":";AAAA,SACIA,IAAI,EACJC,QAAQ,EACRC,UAAU,EACVC,YAAY,EACZC,SAAS,EACTC,GAAG,EACHC,GAAG,EACHC,KAAK,QACF,YAAY;AACnB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,gBAAgBA,CAACC,OAAO,EAAE;EAC/B,OAAOA,OAAO,KAAK,CAAC;AACxB;AAEA,SAASC,oBAAoBA,CAACC,IAAI,EAAE;EAChC,IAAIA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKC,SAAS,EAAE;IACrC,oBACIP,OAAA,CAAAE,SAAA;MAAAM,QAAA,eACIR,OAAA,CAACV,IAAI;QAAAkB,QAAA,eACDR,OAAA,CAACR,UAAU;UAAAgB,QAAA,gBACPR,OAAA,CAACN,SAAS;YAACe,SAAS,EAAC,qBAAqB;YAAAD,QAAA,EAAC;UACf;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eACxCb,OAAA,CAACP,YAAY;YAACgB,SAAS,EAAC,sBAAsB;YAAAD,QAAA,EAAC;UAG/C;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAc,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX;IAAC,gBACT,CAAC;EACX;EACA,MAAMC,eAAe,GAAGR,IAAI,CAACQ,eAAe;EAC5CC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAC9BD,OAAO,CAACC,GAAG,CAACF,eAAe,CAAC;EAC5BC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBD,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;EACjB,MAAMW,UAAU,GAAGX,IAAI,CAACW,UAAU;EAClCF,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EACzBD,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;EACvB,MAAMC,OAAO,GAAGZ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEY,OAAO;EAC7B,IAAIC,MAAM,GAAG,GAAG;EAChB;EACA,IAAID,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;IACtBA,MAAM,GAAG,GAAG;EAChB;EACA,MAAMC,WAAW,GAAGH,UAAU,CAACA,UAAU;EACzC,IAAII,iBAAiB;EACrB,IAAIC,gBAAgB,GAAGL,UAAU,CAACM,UAAU;EAC5C,IAAID,gBAAgB,KAAK,IAAI,IAAIA,gBAAgB,KAAKf,SAAS,EAAE;IAC7DQ,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtD,oBACIhB,OAAA,CAAAE,SAAA;MAAAM,QAAA,eACIR,OAAA,CAACV,IAAI;QAAAkB,QAAA,gBACDR,OAAA,CAACR,UAAU;UAAAgB,QAAA,gBACPR,OAAA,CAACN,SAAS;YAACe,SAAS,EAAC,qBAAqB;YAAAD,QAAA,EAAC;UACf;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eACxCb,OAAA,CAACP,YAAY;YAACgB,SAAS,EAAC,sBAAsB;YAAAD,QAAA,EAAC;UAG/C;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAc,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC,eACbb,OAAA,CAACT,QAAQ;UAAAiB,QAAA,EAAC;QAEV;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAU,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT;IAAC,gBACT,CAAC;EACX;EACA,IAAIW,MAAM,CAACJ,WAAW,CAAC,IAAI,GAAG,EAAE;IAC5BC,iBAAiB,GAAG,IAAI;EAC5B,CAAC,MAAM;IACHA,iBAAiB,GAAG,KAAK;EAC7B;EAEA,MAAMI,UAAU,GAAG;IACf,YAAY,EAAE;MACV,OAAO,EAAEJ,iBAAiB;MAC1B,MAAM,EAAE;IACZ,CAAC;IACD,iBAAiB,EAAE;MACf,OAAO,EAAEC,gBAAgB,CAACI,OAAO,CAAC,CAAC,CAAC;MACpC,MAAM,EAAE;IACZ,CAAC;IACD,QAAQ,EAAE;MACN,OAAO,EAAEP,MAAM;MACf,MAAM,EAAE;IACZ,CAAC;IACD,KAAK,EAAE;MACH,OAAO,EAAED,OAAO,CAACS,GAAG;MACpB,MAAM,EAAE;IACZ,CAAC;IACD,QAAQ,EAAE;MACN,OAAO,EAAET,OAAO,CAACU,MAAM;MACvB,MAAM,EAAE;IACZ,CAAC;IACD,aAAa,EAAE;MACX,OAAO,EAAEV,OAAO,CAACW,WAAW;MAC5B,MAAM,EAAE;IACZ,CAAC;IACD,YAAY,EAAE;MACV,OAAO,EAAEX,OAAO,CAACY,UAAU;MAC3B,MAAM,EAAE;IACZ,CAAC;IACD,kBAAkB,EAAE;MAChB,OAAO,EAAEZ,OAAO,CAACa,SAAS;MAC1B,MAAM,EAAE;IACZ,CAAC;IACD,mBAAmB,EAAE;MACjB,OAAO,EAAEb,OAAO,CAACc,IAAI;MACrB,MAAM,EAAE;IACZ,CAAC;IACD,yBAAyB,EAAE;MACvB,OAAO,EAAEd,OAAO,CAACe,GAAG;MACpB,MAAM,EAAE;IACZ,CAAC;IACD,0BAA0B,EAAE;MACxB,OAAO,EAAEf,OAAO,CAACgB,GAAG;MACpB,MAAM,EAAE;IACZ,CAAC;IACD,qBAAqB,EAAE;MACnB,OAAO,EAAEhB,OAAO,CAACiB,GAAG;MACpB,MAAM,EAAE;IACZ,CAAC;IACD,wBAAwB,EAAE;MACtB,OAAO,EAAEjB,OAAO,CAACkB,GAAG;MACpB,MAAM,EAAE;IACZ,CAAC;IACD,YAAY,EAAE;MACV,OAAO,EAAElB,OAAO,CAACmB,UAAU;MAC3B,MAAM,EAAE;IACZ,CAAC;IACD,gBAAgB,EAAE;MACd,OAAO,EAAEnB,OAAO,CAACoB,QAAQ;MACzB,MAAM,EAAE;IACZ,CAAC;IACD,qBAAqB,EAAE;MACnB,OAAO,EAAEpB,OAAO,CAACqB,GAAG;MACpB,MAAM,EAAE;IACZ,CAAC;IACD,YAAY,EAAE;MACV,OAAO,EAAErB,OAAO,CAACsB,EAAE;MACnB,MAAM,EAAE;IACZ,CAAC;IACD,SAAS,EAAE;MACP,OAAO,EAAEtB,OAAO,CAACuB,GAAG;MACpB,MAAM,EAAE;IACZ,CAAC;IACD,QAAQ,EAAE;MACN,OAAO,EAAEvB,OAAO,CAACwB,EAAE;MACnB,MAAM,EAAE;IACZ,CAAC;IACD,UAAU,EAAE;MACR,OAAO,EAAExB,OAAO,CAACyB,EAAE;MACnB,MAAM,EAAE;IACZ,CAAC;IACD,WAAW,EAAE;MACT,OAAO,EAAEzB,OAAO,CAAC0B,CAAC;MAClB,MAAM,EAAE;IACZ,CAAC;IACD,WAAW,EAAE;MACT,OAAO,EAAE1B,OAAO,CAAC2B,EAAE;MACnB,MAAM,EAAE;IACZ,CAAC;IACD,SAAS,EAAE;MACP,OAAO,EAAE3B,OAAO,CAAC4B,EAAE;MACnB,MAAM,EAAE;IACZ,CAAC;IACD,YAAY,EAAE;MACV,OAAO,EAAE5B,OAAO,CAAC6B,CAAC;MAClB,MAAM,EAAE;IACZ,CAAC;IACD,gCAAgC,EAAE;MAC9B,OAAO,EAAE7B,OAAO,CAAC8B,GAAG;MACpB,MAAM,EAAE;IACZ,CAAC;IACD,kBAAkB,EAAE;MAChB,OAAO,EAAE9B,OAAO,CAAC+B,EAAE;MACnB,MAAM,EAAE;IACZ,CAAC;IACD,6BAA6B,EAAE;MAC3B,OAAO,EAAE/B,OAAO,CAACgC,GAAG;MACpB,MAAM,EAAE;IACZ,CAAC;IACD,aAAa,EAAE;MACX,OAAO,EAAEhC,OAAO,CAACiC,WAAW;MAC5B,MAAM,EAAE;IACZ,CAAC;IACD,WAAW,EAAE;MACT,OAAO,EAAEjC,OAAO,CAACkC,QAAQ;MACzB,MAAM,EAAE;IACZ,CAAC;IACD,oBAAoB,EAAE;MAClB,OAAO,EAAElC,OAAO,CAACmC,GAAG;MACpB,MAAM,EAAE;IACZ,CAAC;IACD,aAAa,EAAE;MACX,OAAO,EAAEnC,OAAO,CAACoC,IAAI;MACrB,MAAM,EAAE;IACZ,CAAC;IACD,sCAAsC,EAAE;MACpC,OAAO,EAAEpC,OAAO,CAACqC,IAAI;MACrB,MAAM,EAAE;IACZ,CAAC;IACD,kBAAkB,EAAE;MAChB,OAAO,EAAErC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEsC,IAAI;MACtB,MAAM,EAAE;IACZ,CAAC;IACD,WAAW,EAAE;MACT,OAAO,EAAEtC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEuC,IAAI;MACtB,MAAM,EAAE;IACZ,CAAC;IACD,2CAA2C,EAAE;MACzC,OAAO,EAAEvC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEwC,UAAU;MAC5B,MAAM,EAAE;IACZ,CAAC;IACD,6BAA6B,EAAE;MAC3B,OAAO,EAAExC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEyC,GAAG;MACrB,MAAM,EAAE;IACZ,CAAC;IACD,wBAAwB,EAAE;MACtB,OAAO,EAAEzC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE0C,GAAG;MACrB,MAAM,EAAE;IACZ,CAAC;IACD,uCAAuC,EAAE;MACrC,OAAO,EAAE1C,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE2C,IAAI;MACtB,MAAM,EAAE;IACZ,CAAC;IACD,cAAc,EAAE;MACZ,OAAO,EAAE3C,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4C,OAAO;MACzB,MAAM,EAAE;IACZ,CAAC;IACD,mBAAmB,EAAE;MACjB,OAAO,EAAE5C,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE6C,EAAE;MACpB,MAAM,EAAE;IACZ,CAAC;IACD,qBAAqB,EAAE;MACnB,OAAO,EAAE7C,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE8C,GAAG;MACrB,MAAM,EAAE;IACZ,CAAC;IACD,QAAQ,EAAE;MACN,OAAO,EAAE9C,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE+C,MAAM;MACxB,MAAM,EAAE;IACZ,CAAC;IACD,OAAO,EAAE;MACL,OAAO,EAAE9D,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgD,KAAK,CAAC;MACzC,MAAM,EAAE;IACZ,CAAC;IACD,OAAO,EAAE;MACL,OAAO,EAAE/D,gBAAgB,CAACe,OAAO,CAACiD,KAAK,CAAC;MACxC,MAAM,EAAE;IACZ,CAAC;IACD,UAAU,EAAE;MACR,OAAO,EAAEhE,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEkD,QAAQ,CAAC;MAC5C,MAAM,EAAE;IACZ,CAAC;IACD,OAAO,EAAE;MACL,OAAO,EAAEjE,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmD,KAAK,CAAC;MACzC,MAAM,EAAE;IACZ,CAAC;IACD,OAAO,EAAE;MACL,OAAO,EAAElE,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEoD,KAAK,CAAC;MACzC,MAAM,EAAE;IACZ,CAAC;IACD,SAAS,EAAE;MACP,OAAO,EAAEnE,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqD,OAAO,CAAC;MAC3C,MAAM,EAAE;IACZ,CAAC;IACD,oBAAoB,EAAE;MAClB,OAAO,EAAEpE,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEsD,GAAG,CAAC;MACvC,MAAM,EAAE;IACZ,CAAC;IACD,oCAAoC,EAAE;MAClC,OAAO,EAAErE,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEuD,KAAK,CAAC;MACzC,MAAM,EAAE;IACZ,CAAC;IACD,4BAA4B,EAAE;MAC1B,OAAO,EAAEtE,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEwD,IAAI,CAAC;MACxC,MAAM,EAAE;IACZ,CAAC;IACD,qCAAqC,EAAE;MACnC,OAAO,EAAEvE,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEyD,SAAS,CAAC;MAC7C,MAAM,EAAE;IACZ,CAAC;IACD,8BAA8B,EAAE;MAC5B,OAAO,EAAExE,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE0D,IAAI,CAAC;MACxC,MAAM,EAAE;IACZ,CAAC;IACD,8BAA8B,EAAE;MAC5B,OAAO,EAAEzE,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE2D,IAAI,CAAC;MACxC,MAAM,EAAE;IACZ,CAAC;IACD,4BAA4B,EAAE;MAC1B,OAAO,EAAE1E,gBAAgB,CAACe,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4D,KAAK,CAAC;MACzC,MAAM,EAAE;IACZ;EACJ,CAAC;EACD,IAAIC,oBAAoB,GAAG,EAAE;EAC7B,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACzD,UAAU,CAAC;EACtC,IAAI0D,gBAAgB,GAAG,EAAE;EAEzB,KAAK,MAAMC,KAAK,IAAI3D,UAAU,EAAE;IAC5B,MAAM4D,KAAK,GAAG5D,UAAU,CAAC2D,KAAK,CAAC,CAACC,KAAK;IACrC,MAAMC,IAAI,GAAG7D,UAAU,CAAC2D,KAAK,CAAC,CAACE,IAAI;IACnCH,gBAAgB,CAACI,IAAI,CAAC,CAACF,KAAK,EAAEC,IAAI,CAAC,CAAC;EACxC;EACA,IAAIE,IAAI,GAAG1E,eAAe,CAAC2E,MAAM,GAAG,CAAC;EACrC,IAAIC,OAAO,GAAG,EAAE;EAEhB,OAAOF,IAAI,IAAI,CAAC,EAAE;IACd,IAAIG,cAAc,GAAG7E,eAAe,CAAC0E,IAAI,CAAC;IAE1C,IAAIrE,MAAM,GAAG,GAAG;IAChB;IACA,IAAIwE,cAAc,CAACxE,MAAM,KAAK,CAAC,EAAE;MAC7BA,MAAM,GAAG,GAAG;IAChB;IAEA,MAAMyE,IAAI,GAAGD,cAAc,CAACC,IAAI;IAChC,IAAI3E,UAAU;IACd,IAAI4E,SAAS,GAAGF,cAAc,CAACG,GAAG;IAClC,IAAItE,MAAM,CAACoE,IAAI,CAAC,IAAI,GAAG,EAAE;MACrB3E,UAAU,GAAG,IAAI;MACjB4E,SAAS,GAAGA,SAAS,GAAG,GAAG;IAC/B,CAAC,MAAM;MACH5E,UAAU,GAAG,KAAK;MAClB4E,SAAS,GAAG,GAAG,GAAGA,SAAS,GAAG,GAAG;IACrC;IACA,IAAIE,qBAAqB,GAAG;MACxB,YAAY,EAAE;QACV,OAAO,EAAE9E,UAAU;QACnB,MAAM,EAAE;MACZ,CAAC;MACD,iBAAiB,EAAE;QACf,OAAO,EAAE4E,SAAS,CAACnE,OAAO,CAAC,CAAC,CAAC;QAC7B,MAAM,EAAE;MACZ,CAAC;MACD,QAAQ,EAAE;QACN,OAAO,EAAEP,MAAM;QACf,MAAM,EAAE;MACZ,CAAC;MACD,KAAK,EAAE;QACH,OAAO,EAAEwE,cAAc,CAAChE,GAAG;QAC3B,MAAM,EAAE;MACZ,CAAC;MACD,QAAQ,EAAE;QACN,OAAO,EAAEgE,cAAc,CAAC/D,MAAM;QAC9B,MAAM,EAAE;MACZ,CAAC;MACD,aAAa,EAAE;QACX,OAAO,EAAE+D,cAAc,CAAC9D,WAAW;QACnC,MAAM,EAAE;MACZ,CAAC;MACD,YAAY,EAAE;QACV,OAAO,EAAE8D,cAAc,CAAC7D,UAAU;QAClC,MAAM,EAAE;MACZ,CAAC;MACD,kBAAkB,EAAE;QAChB,OAAO,EAAE6D,cAAc,CAAC5D,SAAS;QACjC,MAAM,EAAE;MACZ,CAAC;MACD,mBAAmB,EAAE;QACjB,OAAO,EAAE4D,cAAc,CAAC3D,IAAI;QAC5B,MAAM,EAAE;MACZ,CAAC;MACD,yBAAyB,EAAE;QACvB,OAAO,EAAE2D,cAAc,CAAC1D,GAAG;QAC3B,MAAM,EAAE;MACZ,CAAC;MACD,0BAA0B,EAAE;QACxB,OAAO,EAAE0D,cAAc,CAACzD,GAAG;QAC3B,MAAM,EAAE;MACZ,CAAC;MACD,qBAAqB,EAAE;QACnB,OAAO,EAAEyD,cAAc,CAACxD,GAAG;QAC3B,MAAM,EAAE;MACZ,CAAC;MACD,wBAAwB,EAAE;QACtB,OAAO,EAAEwD,cAAc,CAACvD,GAAG;QAC3B,MAAM,EAAE;MACZ,CAAC;MACD,YAAY,EAAE;QACV,OAAO,EAAEuD,cAAc,CAACtD,UAAU;QAClC,MAAM,EAAE;MACZ,CAAC;MACD,gBAAgB,EAAE;QACd,OAAO,EAAEsD,cAAc,CAACrD,QAAQ;QAChC,MAAM,EAAE;MACZ,CAAC;MACD,qBAAqB,EAAE;QACnB,OAAO,EAAEqD,cAAc,CAACpD,GAAG;QAC3B,MAAM,EAAE;MACZ,CAAC;MACD,YAAY,EAAE;QACV,OAAO,EAAEoD,cAAc,CAACnD,EAAE;QAC1B,MAAM,EAAE;MACZ,CAAC;MACD,SAAS,EAAE;QACP,OAAO,EAAEmD,cAAc,CAAClD,GAAG;QAC3B,MAAM,EAAE;MACZ,CAAC;MACD,QAAQ,EAAE;QACN,OAAO,EAAEkD,cAAc,CAACjD,EAAE;QAC1B,MAAM,EAAE;MACZ,CAAC;MACD,UAAU,EAAE;QACR,OAAO,EAAEiD,cAAc,CAAChD,EAAE;QAC1B,MAAM,EAAE;MACZ,CAAC;MACD,WAAW,EAAE;QACT,OAAO,EAAEgD,cAAc,CAAC/C,CAAC;QACzB,MAAM,EAAE;MACZ,CAAC;MACD,WAAW,EAAE;QACT,OAAO,EAAE+C,cAAc,CAAC9C,EAAE;QAC1B,MAAM,EAAE;MACZ,CAAC;MACD,SAAS,EAAE;QACP,OAAO,EAAE8C,cAAc,CAAC7C,EAAE;QAC1B,MAAM,EAAE;MACZ,CAAC;MACD,YAAY,EAAE;QACV,OAAO,EAAE6C,cAAc,CAAC5C,CAAC;QACzB,MAAM,EAAE;MACZ,CAAC;MACD,gCAAgC,EAAE;QAC9B,OAAO,EAAE4C,cAAc,CAAC3C,GAAG;QAC3B,MAAM,EAAE;MACZ,CAAC;MACD,kBAAkB,EAAE;QAChB,OAAO,EAAE2C,cAAc,CAAC1C,EAAE;QAC1B,MAAM,EAAE;MACZ,CAAC;MACD,6BAA6B,EAAE;QAC3B,OAAO,EAAE0C,cAAc,CAACzC,GAAG;QAC3B,MAAM,EAAE;MACZ,CAAC;MACD,aAAa,EAAE;QACX,OAAO,EAAEyC,cAAc,CAACxC,WAAW;QACnC,MAAM,EAAE;MACZ,CAAC;MACD,WAAW,EAAE;QACT,OAAO,EAAEwC,cAAc,CAACvC,QAAQ;QAChC,MAAM,EAAE;MACZ,CAAC;MACD,oBAAoB,EAAE;QAClB,OAAO,EAAEuC,cAAc,CAACtC,GAAG;QAC3B,MAAM,EAAE;MACZ,CAAC;MACD,aAAa,EAAE;QACX,OAAO,EAAEsC,cAAc,CAACrC,IAAI;QAC5B,MAAM,EAAE;MACZ,CAAC;MACD,sCAAsC,EAAE;QACpC,OAAO,EAAEqC,cAAc,CAACpC,IAAI;QAC5B,MAAM,EAAE;MACZ,CAAC;MACD,kBAAkB,EAAE;QAChB,OAAO,EAAEoC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEnC,IAAI;QAC7B,MAAM,EAAE;MACZ,CAAC;MACD,WAAW,EAAE;QACT,OAAO,EAAEmC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAElC,IAAI;QAC7B,MAAM,EAAE;MACZ,CAAC;MACD,2CAA2C,EAAE;QACzC,OAAO,EAAEkC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEjC,UAAU;QACnC,MAAM,EAAE;MACZ,CAAC;MACD,6BAA6B,EAAE;QAC3B,OAAO,EAAEiC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEhC,GAAG;QAC5B,MAAM,EAAE;MACZ,CAAC;MACD,wBAAwB,EAAE;QACtB,OAAO,EAAEgC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE/B,GAAG;QAC5B,MAAM,EAAE;MACZ,CAAC;MACD,uCAAuC,EAAE;QACrC,OAAO,EAAE+B,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE9B,IAAI;QAC7B,MAAM,EAAE;MACZ,CAAC;MACD,cAAc,EAAE;QACZ,OAAO,EAAE8B,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE7B,OAAO;QAChC,MAAM,EAAE;MACZ,CAAC;MACD,mBAAmB,EAAE;QACjB,OAAO,EAAE6B,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE5B,EAAE;QAC3B,MAAM,EAAE;MACZ,CAAC;MACD,qBAAqB,EAAE;QACnB,OAAO,EAAE4B,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE3B,GAAG;QAC5B,MAAM,EAAE;MACZ,CAAC;MACD,QAAQ,EAAE;QACN,OAAO,EAAE2B,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE1B,MAAM;QAC/B,MAAM,EAAE;MACZ,CAAC;MACD,OAAO,EAAE;QACL,OAAO,EAAE9D,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEzB,KAAK,CAAC;QAChD,MAAM,EAAE;MACZ,CAAC;MACD,OAAO,EAAE;QACL,OAAO,EAAE/D,gBAAgB,CAACwF,cAAc,CAACxB,KAAK,CAAC;QAC/C,MAAM,EAAE;MACZ,CAAC;MACD,UAAU,EAAE;QACR,OAAO,EAAEhE,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEvB,QAAQ,CAAC;QACnD,MAAM,EAAE;MACZ,CAAC;MACD,OAAO,EAAE;QACL,OAAO,EAAEjE,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEtB,KAAK,CAAC;QAChD,MAAM,EAAE;MACZ,CAAC;MACD,OAAO,EAAE;QACL,OAAO,EAAElE,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAErB,KAAK,CAAC;QAChD,MAAM,EAAE;MACZ,CAAC;MACD,SAAS,EAAE;QACP,OAAO,EAAEnE,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEpB,OAAO,CAAC;QAClD,MAAM,EAAE;MACZ,CAAC;MACD,oBAAoB,EAAE;QAClB,OAAO,EAAEpE,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEnB,GAAG,CAAC;QAC9C,MAAM,EAAE;MACZ,CAAC;MACD,oCAAoC,EAAE;QAClC,OAAO,EAAErE,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAElB,KAAK,CAAC;QAChD,MAAM,EAAE;MACZ,CAAC;MACD,4BAA4B,EAAE;QAC1B,OAAO,EAAEtE,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEjB,IAAI,CAAC;QAC/C,MAAM,EAAE;MACZ,CAAC;MACD,qCAAqC,EAAE;QACnC,OAAO,EAAEvE,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEhB,SAAS,CAAC;QACpD,MAAM,EAAE;MACZ,CAAC;MACD,8BAA8B,EAAE;QAC5B,OAAO,EAAExE,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEf,IAAI,CAAC;QAC/C,MAAM,EAAE;MACZ,CAAC;MACD,8BAA8B,EAAE;QAC5B,OAAO,EAAEzE,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEd,IAAI,CAAC;QAC/C,MAAM,EAAE;MACZ,CAAC;MACD,4BAA4B,EAAE;QAC1B,OAAO,EAAE1E,gBAAgB,CAACwF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEb,KAAK,CAAC;QAChD,MAAM,EAAE;MACZ;IACJ,CAAC;IACDC,oBAAoB,CAACQ,IAAI,CAACQ,qBAAqB,CAAC;IAEhD,IAAIC,qBAAqB,GAAG,EAAE;IAC9B,KAAK,MAAMZ,KAAK,IAAIW,qBAAqB,EAAE;MACvC,MAAMV,KAAK,GAAGU,qBAAqB,CAACX,KAAK,CAAC,CAACC,KAAK;MAChD,MAAMC,IAAI,GAAGS,qBAAqB,CAACX,KAAK,CAAC,CAACE,IAAI;MAC9CU,qBAAqB,CAACT,IAAI,CAAC,CAACF,KAAK,EAAEC,IAAI,CAAC,CAAC;IAC7C;IACAI,OAAO,CAACH,IAAI,CAACS,qBAAqB,CAAC;IACnCA,qBAAqB,GAAG,EAAE;IAC1BR,IAAI,EAAE;EACV;EAEA,IAAIS,gBAAgB;EACpB,IAAIC,cAAc;EAElB,IAAIpF,eAAe,CAAC2E,MAAM,GAAG,CAAC,EAAE;IAC5B,MAAMG,IAAI,GAAG9E,eAAe,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IACvCoF,cAAc,GAAGpF,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAC1C,IAAIU,MAAM,CAACoE,IAAI,CAAC,IAAI,GAAG,EAAE;MACrBK,gBAAgB,GAAG,IAAI;MACvBC,cAAc,GAAGA,cAAc,GAAG,GAAG;IACzC,CAAC,MAAM;MACHD,gBAAgB,GAAG,KAAK;MACxBC,cAAc,GAAG,GAAG,GAAGA,cAAc,GAAG,GAAG;IAC/C;EACJ;EAEA,MAAMC,SAAS,GAAGnB,MAAM,CAACoB,GAAG,CAAC,CAAChB,KAAK,EAAEiB,KAAK,MAAM;IAC5CC,EAAE,EAAED,KAAK,GAAG,CAAC;IACbE,QAAQ,EAAEnB,KAAK;IACfoB,eAAe,EAAErB,gBAAgB,CAACkB,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3CI,SAAS,EAAEtB,gBAAgB,CAACkB,KAAK,CAAC,CAAC,CAAC,CAAC;IACrCvF,eAAe,EAAE4E,OAAO,GAAGA,OAAO,CAACU,GAAG,CAACM,EAAE,IAAIA,EAAE,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;EACjE,CAAC,CAAC,CAAC;EAGH,SAASM,QAAQA,CAACC,GAAG,EAAE;IACnB,IAAIA,GAAG,CAAC9F,eAAe,KAAK8F,GAAG,CAACJ,eAAe,EAAE;MAC7C,OAAO,WAAW;IACtB,CAAC,MAAM;MACH,OAAO,WAAW;IACtB;EACJ;EAEA,oBACIxG,OAAA,CAAAE,SAAA;IAAAM,QAAA,eACIR,OAAA,CAACV,IAAI;MAAAkB,QAAA,gBACDR,OAAA,CAACR,UAAU;QAAAgB,QAAA,gBACPR,OAAA,CAACN,SAAS;UAACe,SAAS,EAAC,qBAAqB;UAAAD,QAAA,EAAC;QACf;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,eACxCb,OAAA,CAACP,YAAY;UAACgB,SAAS,EAAC,sBAAsB;UAAAD,QAAA,EAAC;QAG/C;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC,eACbb,OAAA,CAACT,QAAQ;QAAAiB,QAAA,eACLR,OAAA,CAACJ,GAAG;UAAAY,QAAA,eACAR,OAAA,CAACL,GAAG;YAACkH,EAAE,EAAE,CAAE;YAAArG,QAAA,eACPR,OAAA,CAACH,KAAK;cAAAW,QAAA,gBACFR,OAAA;gBAAAQ,QAAA,eACAR,OAAA;kBAAAQ,QAAA,gBACIR,OAAA;oBAAAQ,QAAA,EAAI;kBAAQ;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAI,CAAC,eACjBb,OAAA;oBAAIS,SAAS,EAAC,iBAAiB;oBAAAD,QAAA,EAAC;kBAEhC;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAI,CAAC,EACJ6E,OAAO,IAAIA,OAAO,CAACU,GAAG,CAAC,CAACU,CAAC,EAAET,KAAK,kBAC7BrG,OAAA;oBACIS,SAAS,EAAC,iBAAiB;oBAAAD,QAAA,GAAC,iBAAe,EAAC6F,KAAK,GAAG,CAAC;kBAAA,GADhDA,KAAK;oBAAA3F,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACgD,CACjE,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEF;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CAAC,eACRb,OAAA;gBAAAQ,QAAA,EACC2F,SAAS,CAACC,GAAG,CAAEQ,GAAG,iBAEf5G,OAAA;kBAAAQ,QAAA,gBACIR,OAAA;oBAAIS,SAAS,EAAE,GAAGkG,QAAQ,CAACC,GAAG,CAAC,gBAAiB;oBAAApG,QAAA,EAAEoG,GAAG,CAACL;kBAAQ;oBAAA7F,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,EACnE,OAAQ+F,GAAG,CAACJ,eAAgB,KAAK,QAAQ,IAAII,GAAG,CAACJ,eAAe,CAACO,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,GAAG,CAAC,gBACtFhH,OAAA;oBAAIS,SAAS,EAAE,GAAGkG,QAAQ,CAACC,GAAG,CAAC,YAAa;oBAAApG,QAAA,EAAEgB,MAAM,CAACyF,UAAU,CAACL,GAAG,CAACJ,eAAe,CAAC,CAAC9E,OAAO,CAAC,CAAC;kBAAC;oBAAAhB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,gBAErGb,OAAA;oBAAIS,SAAS,EAAE,GAAGkG,QAAQ,CAACC,GAAG,CAAC,YAAa;oBAAApG,QAAA,EAAEoG,GAAG,CAACJ,eAAe,CAACO,QAAQ,CAAC;kBAAC;oBAAArG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CACpF,EACA+F,GAAG,CAAC9F,eAAe,IAAI8F,GAAG,CAAC9F,eAAe,CAAC2E,MAAM,GAAG,CAAC,GAClDmB,GAAG,CAAC9F,eAAe,CAACsF,GAAG,CAAC,CAACf,KAAK,EAAEgB,KAAK,KACjC,OAAQhB,KAAM,KAAK,QAAQ,IAAIA,KAAK,CAAC0B,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,GAAG,CAAC,gBACzDhH,OAAA;oBAAgBS,SAAS,EAAE,GAAGkG,QAAQ,CAACC,GAAG,CAAC,YAAa;oBAAApG,QAAA,EAAEgB,MAAM,CAACyF,UAAU,CAAC5B,KAAK,CAAC,CAAC3D,OAAO,CAAC,CAAC;kBAAC,GAApF2E,KAAK;oBAAA3F,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAoF,CAAC,gBAEnGb,OAAA;oBAAgBS,SAAS,EAAE,GAAGkG,QAAQ,CAACC,GAAG,CAAC,YAAa;oBAAApG,QAAA,EAAE6E,KAAK,CAAC0B,QAAQ,CAAC;kBAAC,GAAjEV,KAAK;oBAAA3F,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAiE,CAEtF,CAAC,gBAEFb,OAAA;oBAAIS,SAAS,EAAE,GAAGkG,QAAQ,CAACC,GAAG,CAAC,YAAa;oBACxCM,OAAO,EAAExB,OAAO,CAACD,MAAO;oBAAAjF,QAAA,EAAC;kBACrB;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAI,CACf;gBAAA,GAnBI+F,GAAG,CAACN,EAAE;kBAAA5F,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAoBX,CAEP;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACK,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT;EAAC,gBACT,CAAC;AAEX;AAACsG,EAAA,GAhoBQ9G,oBAAoB;AAkoB7B,eAAeA,oBAAoB;AAAC,IAAA8G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}